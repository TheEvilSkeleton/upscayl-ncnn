name: release
on:
  workflow_dispatch:

env:
  APPLICATION_NAME: upscayl-bin
  VK_VERSION: 1.3.280.0

jobs:
  setup:
    runs-on: ubuntu-20.04
    outputs:
      APPNAME: ${{ steps.get_appname.outputs.APPNAME }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: get-appname
        id: get_appname
        run: echo ::set-output name=APPNAME::${APPLICATION_NAME}
      - name: get-version
        id: get_version
        run: echo "VERSION=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

  ubuntu:
    needs: [setup]
    runs-on: ubuntu-20.04
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-linux
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: cache-vulkansdk
        id: cache-vulkansdk
        uses: actions/cache@v1
        with:
          path: "{{ env.VK_VERSION }}"
          key: "vulkansdk-linux-x86_64-{{ env.VK_VERSION }}"
      - name: vulkansdk
        if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
        run: |
          wget https://sdk.lunarg.com/sdk/download/$VK_VERSION/linux/vulkansdk-linux-x86_64-$VK_VERSION.tar.xz?Human=true -O vulkansdk-linux-x86_64-$VK_VERSION.tar.xz
          tar -xf vulkansdk-linux-x86_64-$VK_VERSION.tar.xz
          rm -rf $VK_VERSION/source $VK_VERSION/samples
          find $VK_VERSION -type f | grep -v -E 'vulkan|glslang' | xargs rm
      - name: build
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install gcc-9 g++-9
          export CXX="g++-9" CC="gcc-9"
          export VULKAN_SDK=`pwd`/$VK_VERSION/x86_64
          mkdir build && cd build
          cmake ../src
          cmake --build . -j 2
      - name: package
        # cp -r models/* ${{ env.PACKAGENAME }}
        run: |
          mkdir -p ${{ env.PACKAGENAME }}
          cp README.md LICENSE ${{ env.PACKAGENAME }}
          cp build/${{ needs.setup.outputs.APPNAME }} ${{ env.PACKAGENAME }}
          strip -g ${{ env.PACKAGENAME }}/${{ needs.setup.outputs.APPNAME }}
          zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: download
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: print-vars
        run: |
          echo ${{ secrets.VERSION }}

      - name: create-release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: upscayl-bin-${{ needs.setup.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: upload-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-linux
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
          asset_name: ${{ env.PACKAGENAME }}.zip
          asset_content_type: application/zip
